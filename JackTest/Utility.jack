class Utility
{

 function int GetRandomNumberRange(int range,Canvas canvasIn)
 {
    var int num;
    var int baseNumber;
    var int counter;
    var boolean isNumberEven;

    let num = 0;
    let counter = canvasIn.getCounter(54);
    let baseNumber = Utility.modulo(counter,range);
    

    while((~(baseNumber = 1)) & (~(baseNumber=2)) & (~(baseNumber=4)))
    {
         if(10<num)
         {
            return baseNumber;
         }
         let isNumberEven = Utility.isEven(baseNumber);
         if(isNumberEven)
         {
            let baseNumber =  Math.divide(baseNumber,2);
         }
         else
         {
             let baseNumber =  Math.multiply(baseNumber,3);
             let baseNumber = baseNumber+1;
         }
         let num = num+1;
     }

     return num;
 }
  
 function int modulo(int x,int y)
 {
    var int division;
    var int multiplication;
    var int returnValue;
     if(x>y)
     {
        let division = Math.divide(x,y);
        let multiplication = Math.multiply(division,y);
        let returnValue = x-multiplication;
        return returnValue;
     }
     else
     {
         return x;
     }
    
     
 }

 function bool isEven(int num)
 {
    var Fraction checkEvenFract;
    var int denominator;

    let checkEvenFract = Fraction.new(num,2);
    let denominator = checkEvenFract.getDenominator();
    do checkEvenFract.dispose();
    if(denominator=1)
    {
        return true;
    }
    else
    {
        return false;
    }
    
 }

 function void drawA(int location) {
	 var int memAddress;
    let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 0);
	do Memory.poke(memAddress+64, 4080);
	do Memory.poke(memAddress+96, 2064);
	do Memory.poke(memAddress+128, 2064);
	do Memory.poke(memAddress+160, 2064);
	do Memory.poke(memAddress+192, 2064);
	do Memory.poke(memAddress+224, 2064);
	do Memory.poke(memAddress+256, 2064);
	do Memory.poke(memAddress+288, 8184);
	do Memory.poke(memAddress+320, 4104);
	do Memory.poke(memAddress+352, 4104);
	do Memory.poke(memAddress+384, 4104);
	do Memory.poke(memAddress+416, 4104);
	do Memory.poke(memAddress+448, 4104);
	do Memory.poke(memAddress+480, 4104);
	return;
}
function void draw1(int location) {
	 var int memAddress;
    let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 0);
	do Memory.poke(memAddress+64, 384);
	do Memory.poke(memAddress+96, 448);
	do Memory.poke(memAddress+128, 480);
	do Memory.poke(memAddress+160, 416);
	do Memory.poke(memAddress+192, 384);
	do Memory.poke(memAddress+224, 384);
	do Memory.poke(memAddress+256, 384);
	do Memory.poke(memAddress+288, 384);
	do Memory.poke(memAddress+320, 384);
	do Memory.poke(memAddress+352, 384);
	do Memory.poke(memAddress+384, 384);
	do Memory.poke(memAddress+416, 384);
	do Memory.poke(memAddress+448, 384);
	do Memory.poke(memAddress+480, 4080);
	return;
}
function void draw2(int location) {
	 var int memAddress;
    let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 2016);
	do Memory.poke(memAddress+32, 3696);
	do Memory.poke(memAddress+64, 6168);
	do Memory.poke(memAddress+96, 12300);
	do Memory.poke(memAddress+128, 8196);
	do Memory.poke(memAddress+160, 8192);
	do Memory.poke(memAddress+192, 14336);
	do Memory.poke(memAddress+224, 3840);
	do Memory.poke(memAddress+256, 448);
	do Memory.poke(memAddress+288, 112);
	do Memory.poke(memAddress+320, 24);
	do Memory.poke(memAddress+352, 24);
	do Memory.poke(memAddress+384, 24);
	do Memory.poke(memAddress+416, 8216);
	do Memory.poke(memAddress+448, 12312);
	do Memory.poke(memAddress+480, 16376);
	return;
}
function void draw3(int location) {
	 var int memAddress;
    let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 992);
	do Memory.poke(memAddress+32, 1040);
	do Memory.poke(memAddress+64, 1024);
	do Memory.poke(memAddress+96, 1024);
	do Memory.poke(memAddress+128, 1024);
	do Memory.poke(memAddress+160, 1024);
	do Memory.poke(memAddress+192, 512);
	do Memory.poke(memAddress+224, 496);
	do Memory.poke(memAddress+256, 512);
	do Memory.poke(memAddress+288, 1024);
	do Memory.poke(memAddress+320, 3072);
	do Memory.poke(memAddress+352, 3072);
	do Memory.poke(memAddress+384, 3072);
	do Memory.poke(memAddress+416, 1024);
	do Memory.poke(memAddress+448, 1552);
	do Memory.poke(memAddress+480, 992);
	return;
}
function void draw4(int location) {
	 var int memAddress;
    let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 256);
	do Memory.poke(memAddress+64, 384);
	do Memory.poke(memAddress+96, 320);
	do Memory.poke(memAddress+128, 288);
	do Memory.poke(memAddress+160, 272);
	do Memory.poke(memAddress+192, 264);
	do Memory.poke(memAddress+224, 260);
	do Memory.poke(memAddress+256, 258);
	do Memory.poke(memAddress+288, 16382);
	do Memory.poke(memAddress+320, 256);
	do Memory.poke(memAddress+352, 256);
	do Memory.poke(memAddress+384, 256);
	do Memory.poke(memAddress+416, 256);
	do Memory.poke(memAddress+448, 256);
	do Memory.poke(memAddress+480, 256);
	return;
}
function void draw5(int location) {
	 var int memAddress;
    let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 0);
	do Memory.poke(memAddress+64, 4080);
	do Memory.poke(memAddress+96, 16);
	do Memory.poke(memAddress+128, 16);
	do Memory.poke(memAddress+160, 16);
	do Memory.poke(memAddress+192, 16);
	do Memory.poke(memAddress+224, 16);
	do Memory.poke(memAddress+256, 1008);
	do Memory.poke(memAddress+288, 1024);
	do Memory.poke(memAddress+320, 2048);
	do Memory.poke(memAddress+352, 4096);
	do Memory.poke(memAddress+384, 4096);
	do Memory.poke(memAddress+416, 2064);
	do Memory.poke(memAddress+448, 1072);
	do Memory.poke(memAddress+480, 992);
	return;
}
function void draw6(int location) {
	var int memAddress;
    let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 1920);
	do Memory.poke(memAddress+64, 2112);
	do Memory.poke(memAddress+96, 4160);
	do Memory.poke(memAddress+128, 32);
	do Memory.poke(memAddress+160, 32);
	do Memory.poke(memAddress+192, 16);
	do Memory.poke(memAddress+224, 16);
	do Memory.poke(memAddress+256, 16);
	do Memory.poke(memAddress+288, 2032);
	do Memory.poke(memAddress+320, 2064);
	do Memory.poke(memAddress+352, 4112);
	do Memory.poke(memAddress+384, 4112);
	do Memory.poke(memAddress+416, 4144);
	do Memory.poke(memAddress+448, 2112);
	do Memory.poke(memAddress+480, 1920);
	return;
}
function void draw7(int location) {
	var int memAddress;
    let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 8184);
	do Memory.poke(memAddress+64, 4096);
	do Memory.poke(memAddress+96, 4096);
	do Memory.poke(memAddress+128, 2048);
	do Memory.poke(memAddress+160, 2048);
	do Memory.poke(memAddress+192, 1024);
	do Memory.poke(memAddress+224, 1024);
	do Memory.poke(memAddress+256, 8128);
	do Memory.poke(memAddress+288, 512);
	do Memory.poke(memAddress+320, 512);
	do Memory.poke(memAddress+352, 256);
	do Memory.poke(memAddress+384, 256);
	do Memory.poke(memAddress+416, 128);
	do Memory.poke(memAddress+448, 128);
	do Memory.poke(memAddress+480, 64);
	return;
}
function void draw8(int location) {
	var int memAddress;
    let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 992);
	do Memory.poke(memAddress+64, 1040);
	do Memory.poke(memAddress+96, 2056);
	do Memory.poke(memAddress+128, 2056);
	do Memory.poke(memAddress+160, 2056);
	do Memory.poke(memAddress+192, 2056);
	do Memory.poke(memAddress+224, 3096);
	do Memory.poke(memAddress+256, 992);
	do Memory.poke(memAddress+288, 544);
	do Memory.poke(memAddress+320, 3096);
	do Memory.poke(memAddress+352, 2056);
	do Memory.poke(memAddress+384, 2056);
	do Memory.poke(memAddress+416, 2056);
	do Memory.poke(memAddress+448, 1040);
	do Memory.poke(memAddress+480, 992);
	return;
}
function void draw9(int location) {
	 var int memAddress;
    let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 0);
	do Memory.poke(memAddress+32, 3968);
	do Memory.poke(memAddress+64, 4160);
	do Memory.poke(memAddress+96, 4128);
	do Memory.poke(memAddress+128, 4128);
	do Memory.poke(memAddress+160, 4128);
	do Memory.poke(memAddress+192, 4192);
	do Memory.poke(memAddress+224, 8064);
	do Memory.poke(memAddress+256, 4096);
	do Memory.poke(memAddress+288, 4096);
	do Memory.poke(memAddress+320, 4096);
	do Memory.poke(memAddress+352, 4096);
	do Memory.poke(memAddress+384, 2048);
	do Memory.poke(memAddress+416, 2048);
	do Memory.poke(memAddress+448, 1024);
	do Memory.poke(memAddress+480, 960);
	return;
}
function void draw0(int location) {
    var int memAddress;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 960);
	do Memory.poke(memAddress+32, 1056);
	do Memory.poke(memAddress+64, 2064);
	do Memory.poke(memAddress+96, 4136);
	do Memory.poke(memAddress+128, 4168);
	do Memory.poke(memAddress+160, 4232);
	do Memory.poke(memAddress+192, 4232);
	do Memory.poke(memAddress+224, 4360);
	do Memory.poke(memAddress+256, 4360);
	do Memory.poke(memAddress+288, 4616);
	do Memory.poke(memAddress+320, 4616);
	do Memory.poke(memAddress+352, 5128);
	do Memory.poke(memAddress+384, 5128);
	do Memory.poke(memAddress+416, 2064);
	do Memory.poke(memAddress+448, 1056);
	do Memory.poke(memAddress+480, 960);
	return;
}

function void DrawNumber(int xloc,int yloc,int num)
{
  var int digits;
  var boolean continueLoop;
  var List digitList;
  var List startDigitList;
  var int currentDigit;
  var int under10multiple;
  var int top10multiple;
  var int intermidate;
  
  let under10multiple = 1;
  let top10multiple = 10;
  let continueLoop = true;
  let currentDigit = Utility.modulo(num,top10multiple);
  
  let digitList = List.new(currentDigit,null);
  let digits = 0;
  
  while(continueLoop)
  {
    let intermidate = digitList.getData();
   // do Utility.DrawDigit16by16Grid(xloc+digits,yloc,intermidate);

    let num= num-Math.multiply(currentDigit,under10multiple);
    let under10multiple = top10multiple;
    let top10multiple = Math.multiply(top10multiple,10);
    let currentDigit = Utility.modulo(num,top10multiple);
    let currentDigit = Math.divide(currentDigit,under10multiple);
    let digitList = List.new(currentDigit,digitList);
    let digits = digits+1;
    if(top10multiple>num)
    {
        let continueLoop = false;
    }
  }
   let startDigitList = digitList;
   let digits = 0;
   while(~(digitList=null))
   {
       do Utility.DrawDigit16by16Grid(xloc+digits,yloc,digitList.getData());
       let digitList = digitList.getNext();
       let digits = digits+1;
   }
  do startDigitList.Dispose();
  return;
}

function void DrawDigit16by16Grid(int xloc,int yLoc,int digit)
{
    do Utility.DrawDigit(xloc,yLoc,digit);
    return;
}

function void DrawDigit(int xloc,int yLoc,int digit)
{
   var int adress;
   let adress = yLoc*254+xloc; 
   if(digit=0)
   {
    do Utility.draw0(adress);
   }
   else
   {
   if(digit=1)
   {
    do Utility.draw1(adress);
   }
   else
   {
   if(digit=2)
   {
    do Utility.draw2(adress);
   }
   else
   {
   if(digit=3)
   {
     do Utility.draw3(adress);
   }
   else
   {
    if(digit=4)
   {
     do Utility.draw4(adress);
   }
   else
   {
   if(digit=5)
   {
     do Utility.draw5(adress);
   }
   else
   {
   if(digit=6)
   {
    do Utility.draw6(adress);
   }
   else
   {
    if(digit=7)
   {
     do Utility.draw7(adress);
   }
   else
   {
   if(digit=8)
   {
    do Utility.draw8(adress);
   }
   else
   {
   if(digit=9)
   {
    do Utility.draw9(adress);
   } 
   }   
   }   
   }
   }   
   }
   }
   }
   }
   }
    return;
}
 
}
