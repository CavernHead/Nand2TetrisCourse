<class>
	<keyword>class</keyword>
	<identifier>Main</identifier>
	<symbol>{</symbol>
	<classVarDec>
		<keyword>boolean</keyword>
		<identifier>test</identifier>
		<symbol>;</symbol>
	</classVarDec>
	<subroutineDec>
		<keyword>void</keyword>
		<identifier>main</identifier>
		<parameterList>
			<symbol>(</symbol>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<varDec>
				<identifier>SquareGame</identifier>
				<identifier>game</identifier>
				<symbol>;</symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword>let</keyword>
					<identifier>game</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<subroutineCall>
								<identifier>SquareGame</identifier>
								<symbol>.</symbol>
								<identifier>new</identifier>
								<symbol>(</symbol>
								<symbol>)</symbol>
							</subroutineCall>
						</term>
					</expression>
				</letStatement>
				<doStatement>
					<keyword>do</keyword>
					<subroutineCall>
						<identifier>game</identifier>
						<symbol>.</symbol>
						<identifier>run</identifier>
						<symbol>(</symbol>
						<symbol>)</symbol>
					</subroutineCall>
					<symbol>;</symbol>
				</doStatement>
				<doStatement>
					<keyword>do</keyword>
					<subroutineCall>
						<identifier>game</identifier>
						<symbol>.</symbol>
						<identifier>dispose</identifier>
						<symbol>(</symbol>
						<symbol>)</symbol>
					</subroutineCall>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<subroutineDec>
		<keyword>void</keyword>
		<identifier>more</identifier>
		<parameterList>
			<symbol>(</symbol>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<varDec>
				<keyword>int</keyword>
				<identifier>i</identifier>
				<symbol>,</symbol>
				<identifier>j</identifier>
				<symbol>;</symbol>
			</varDec>
			<varDec>
				<identifier>String</identifier>
				<identifier>s</identifier>
				<symbol>;</symbol>
			</varDec>
			<varDec>
				<identifier>Array</identifier>
				<identifier>a</identifier>
				<symbol>;</symbol>
			</varDec>
			<statements>
				<ifStatement>
					<keyword>if</keyword>
					<symbol>(</symbol>
					<expression>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>s</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<StringConstant>string constant</StringConstant>
								</term>
							</expression>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>s</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<keyword>null</keyword>
								</term>
							</expression>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>a</identifier>
							<symbol>[</symbol>
							<expression>
								<term>
									<integerConstant>1</integerConstant>
								</term>
							</expression>
							<symbol>]</symbol>
							<symbol>=</symbol>
							<expression>
								<term>
									<symbol>[</symbol>
									<expression>
										<term>
											<integerConstant>2</integerConstant>
										</term>
									</expression>
									<symbol>]</symbol>
								</term>
							</expression>
						</letStatement>
					</statements>
					<symbol>}</symbol>
					<keyword>else</keyword>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>i</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>i</identifier>
								</term>
								<symbol>*</symbol>
								<term>
									<expression>
										<term>
											<symbol>-</symbol>
											<identifier>j</identifier>
										</term>
									</expression>
									<symbol>)</symbol>
								</term>
							</expression>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>j</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>j</identifier>
								</term>
								<symbol>/</symbol>
								<term>
									<expression>
										<term>
											<symbol>-</symbol>
											<integerConstant>2</integerConstant>
										</term>
									</expression>
									<symbol>)</symbol>
								</term>
							</expression>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>i</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>i</identifier>
								</term>
								<symbol>|</symbol>
								<term>
									<identifier>j</identifier>
								</term>
							</expression>
						</letStatement>
					</statements>
					<symbol>}</symbol>
				</ifStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<symbol>}</symbol>
</class>
