<class>
	<keyword>class</keyword>
	<identifier>Main</identifier>
	<symbol>{</symbol>
	<subroutineDec>
		<keyword>void</keyword>
		<identifier>main</identifier>
		<parameterList>
			<symbol>(</symbol>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<varDec>
				<keyword>int</keyword>
				<identifier>value</identifier>
				<symbol>;</symbol>
			</varDec>
			<statements>
				<doStatement>
					<keyword>do</keyword>
					<subroutineCall>
						<identifier>Main</identifier>
						<symbol>.</symbol>
						<identifier>fillMemory</identifier>
						<symbol>(</symbol>
						<expressionList>
							<expression>
								<term>
									<integerConstant>8001</integerConstant>
								</term>
							</expression>
							<symbol>,</symbol>
							<expression>
								<term>
									<integerConstant>16</integerConstant>
								</term>
							</expression>
							<symbol>,</symbol>
							<expression>
								<term>
									<symbol>-</symbol>
									<integerConstant>1</integerConstant>
								</term>
							</expression>
						</expressionList>
						<symbol>)</symbol>
					</subroutineCall>
					<symbol>;</symbol>
				</doStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>value</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<subroutineCall>
								<identifier>Memory</identifier>
								<symbol>.</symbol>
								<identifier>peek</identifier>
								<symbol>(</symbol>
								<expressionList>
									<expression>
										<term>
											<integerConstant>8000</integerConstant>
										</term>
									</expression>
								</expressionList>
								<symbol>)</symbol>
							</subroutineCall>
						</term>
					</expression>
				</letStatement>
				<doStatement>
					<keyword>do</keyword>
					<subroutineCall>
						<identifier>Main</identifier>
						<symbol>.</symbol>
						<identifier>convert</identifier>
						<symbol>(</symbol>
						<expressionList>
							<expression>
								<term>
									<identifier>value</identifier>
								</term>
							</expression>
						</expressionList>
						<symbol>)</symbol>
					</subroutineCall>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<subroutineDec>
		<keyword>void</keyword>
		<identifier>convert</identifier>
		<parameterList>
			<symbol>(</symbol>
			<keyword>int</keyword>
			<identifier>value</identifier>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<varDec>
				<keyword>int</keyword>
				<identifier>mask</identifier>
				<symbol>,</symbol>
				<identifier>position</identifier>
				<symbol>;</symbol>
			</varDec>
			<varDec>
				<keyword>boolean</keyword>
				<identifier>loop</identifier>
				<symbol>;</symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword>let</keyword>
					<identifier>loop</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<keyword>true</keyword>
						</term>
					</expression>
				</letStatement>
				<whileStatement>
					<keyword>while</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<identifier>loop</identifier>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>position</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>position</identifier>
								</term>
								<symbol>+</symbol>
								<term>
									<integerConstant>1</integerConstant>
								</term>
							</expression>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>mask</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<subroutineCall>
										<identifier>Main</identifier>
										<symbol>.</symbol>
										<identifier>nextMask</identifier>
										<symbol>(</symbol>
										<expressionList>
											<expression>
												<term>
													<identifier>mask</identifier>
												</term>
											</expression>
										</expressionList>
										<symbol>)</symbol>
									</subroutineCall>
								</term>
							</expression>
						</letStatement>
						<ifStatement>
							<keyword>if</keyword>
							<symbol>(</symbol>
							<expression>
								<term>
									<symbol>~</symbol>
									<expression>
										<term>
											<identifier>position</identifier>
										</term>
										<symbol>_GT_</symbol>
										<term>
											<integerConstant>16</integerConstant>
										</term>
									</expression>
									<symbol>)</symbol>
								</term>
							</expression>
							<symbol>)</symbol>
							<symbol>{</symbol>
							<statements>
								<ifStatement>
									<keyword>if</keyword>
									<symbol>(</symbol>
									<expression>
										<term>
											<symbol>~</symbol>
											<expression>
												<term>
													<expression>
														<term>
															<identifier>value</identifier>
														</term>
														<symbol>_AND_</symbol>
														<term>
															<identifier>mask</identifier>
														</term>
													</expression>
													<symbol>)</symbol>
												</term>
												<symbol>=</symbol>
												<term>
													<integerConstant>0</integerConstant>
												</term>
											</expression>
											<symbol>)</symbol>
										</term>
									</expression>
									<symbol>)</symbol>
									<symbol>{</symbol>
									<statements>
										<doStatement>
											<keyword>do</keyword>
											<subroutineCall>
												<identifier>Memory</identifier>
												<symbol>.</symbol>
												<identifier>poke</identifier>
												<symbol>(</symbol>
												<expressionList>
													<expression>
														<term>
															<integerConstant>8000</integerConstant>
														</term>
														<symbol>+</symbol>
														<term>
															<identifier>position</identifier>
														</term>
													</expression>
													<symbol>,</symbol>
													<expression>
														<term>
															<integerConstant>1</integerConstant>
														</term>
													</expression>
												</expressionList>
												<symbol>)</symbol>
											</subroutineCall>
											<symbol>;</symbol>
										</doStatement>
									</statements>
									<symbol>}</symbol>
									<keyword>else</keyword>
									<symbol>{</symbol>
									<statements>
										<doStatement>
											<keyword>do</keyword>
											<subroutineCall>
												<identifier>Memory</identifier>
												<symbol>.</symbol>
												<identifier>poke</identifier>
												<symbol>(</symbol>
												<expressionList>
													<expression>
														<term>
															<integerConstant>8000</integerConstant>
														</term>
														<symbol>+</symbol>
														<term>
															<identifier>position</identifier>
														</term>
													</expression>
													<symbol>,</symbol>
													<expression>
														<term>
															<integerConstant>0</integerConstant>
														</term>
													</expression>
												</expressionList>
												<symbol>)</symbol>
											</subroutineCall>
											<symbol>;</symbol>
										</doStatement>
									</statements>
									<symbol>}</symbol>
								</ifStatement>
							</statements>
							<symbol>}</symbol>
							<keyword>else</keyword>
							<symbol>{</symbol>
							<statements>
								<letStatement>
									<keyword>let</keyword>
									<identifier>loop</identifier>
									<symbol>=</symbol>
									<expression>
										<term>
											<keyword>false</keyword>
										</term>
									</expression>
								</letStatement>
							</statements>
							<symbol>}</symbol>
						</ifStatement>
					</statements>
					<symbol>}</symbol>
				</whileStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<subroutineDec>
		<keyword>int</keyword>
		<identifier>nextMask</identifier>
		<parameterList>
			<symbol>(</symbol>
			<keyword>int</keyword>
			<identifier>mask</identifier>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<statements>
				<ifStatement>
					<keyword>if</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<identifier>mask</identifier>
						</term>
						<symbol>=</symbol>
						<term>
							<integerConstant>0</integerConstant>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<returnStatement>
							<keyword>return</keyword>
							<expression>
								<term>
									<integerConstant>1</integerConstant>
								</term>
							</expression>
							<symbol>;</symbol>
						</returnStatement>
					</statements>
					<symbol>}</symbol>
					<keyword>else</keyword>
					<symbol>{</symbol>
					<statements>
						<returnStatement>
							<keyword>return</keyword>
							<expression>
								<term>
									<identifier>mask</identifier>
								</term>
								<symbol>*</symbol>
								<term>
									<integerConstant>2</integerConstant>
								</term>
							</expression>
							<symbol>;</symbol>
						</returnStatement>
					</statements>
					<symbol>}</symbol>
				</ifStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<subroutineDec>
		<keyword>void</keyword>
		<identifier>fillMemory</identifier>
		<parameterList>
			<symbol>(</symbol>
			<keyword>int</keyword>
			<identifier>startAddress</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>length</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>value</identifier>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<statements>
				<whileStatement>
					<keyword>while</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<identifier>length</identifier>
						</term>
						<symbol>_GT_</symbol>
						<term>
							<integerConstant>0</integerConstant>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<doStatement>
							<keyword>do</keyword>
							<subroutineCall>
								<identifier>Memory</identifier>
								<symbol>.</symbol>
								<identifier>poke</identifier>
								<symbol>(</symbol>
								<expressionList>
									<expression>
										<term>
											<identifier>startAddress</identifier>
										</term>
									</expression>
									<symbol>,</symbol>
									<expression>
										<term>
											<identifier>value</identifier>
										</term>
									</expression>
								</expressionList>
								<symbol>)</symbol>
							</subroutineCall>
							<symbol>;</symbol>
						</doStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>length</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>length</identifier>
								</term>
								<symbol>-</symbol>
								<term>
									<integerConstant>1</integerConstant>
								</term>
							</expression>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>startAddress</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>startAddress</identifier>
								</term>
								<symbol>+</symbol>
								<term>
									<integerConstant>1</integerConstant>
								</term>
							</expression>
						</letStatement>
					</statements>
					<symbol>}</symbol>
				</whileStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<symbol>}</symbol>
</class>
