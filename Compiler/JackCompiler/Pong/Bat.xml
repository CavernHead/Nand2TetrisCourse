<class>
	<keyword>class</keyword>
	<identifier>Bat</identifier>
	<symbol>{</symbol>
	<classVarDec>
		<keyword>int</keyword>
		<identifier>x</identifier>
		<symbol>,</symbol>
		<identifier>y</identifier>
		<symbol>;</symbol>
	</classVarDec>
	<classVarDec>
		<keyword>int</keyword>
		<identifier>width</identifier>
		<symbol>,</symbol>
		<identifier>height</identifier>
		<symbol>;</symbol>
	</classVarDec>
	<classVarDec>
		<keyword>int</keyword>
		<identifier>direction</identifier>
		<symbol>;</symbol>
	</classVarDec>
	<subroutineDec>
		<identifier>Bat</identifier>
		<identifier>new</identifier>
		<parameterList>
			<symbol>(</symbol>
			<keyword>int</keyword>
			<identifier>Ax</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>Ay</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>Awidth</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>Aheight</identifier>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<statements>
				<letStatement>
					<keyword>let</keyword>
					<identifier>x</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>Ax</identifier>
						</term>
					</expression>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>y</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>Ay</identifier>
						</term>
					</expression>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>width</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>Awidth</identifier>
						</term>
					</expression>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>height</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>Aheight</identifier>
						</term>
					</expression>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>direction</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<integerConstant>2</integerConstant>
						</term>
					</expression>
				</letStatement>
				<doStatement>
					<keyword>do</keyword>
					<subroutineCall>
						<identifier>show</identifier>
						<symbol>(</symbol>
						<symbol>)</symbol>
					</subroutineCall>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<expression>
						<term>
							<keyword>this</keyword>
						</term>
					</expression>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<subroutineDec>
		<keyword>void</keyword>
		<identifier>dispose</identifier>
		<parameterList>
			<symbol>(</symbol>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<statements>
				<doStatement>
					<keyword>do</keyword>
					<subroutineCall>
						<identifier>Memory</identifier>
						<symbol>.</symbol>
						<identifier>deAlloc</identifier>
						<symbol>(</symbol>
						<expressionList>
							<expression>
								<term>
									<keyword>this</keyword>
								</term>
							</expression>
						</expressionList>
						<symbol>)</symbol>
					</subroutineCall>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<subroutineDec>
		<keyword>void</keyword>
		<identifier>show</identifier>
		<parameterList>
			<symbol>(</symbol>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<statements>
				<doStatement>
					<keyword>do</keyword>
					<subroutineCall>
						<identifier>Screen</identifier>
						<symbol>.</symbol>
						<identifier>setColor</identifier>
						<symbol>(</symbol>
						<expressionList>
							<expression>
								<term>
									<keyword>true</keyword>
								</term>
							</expression>
						</expressionList>
						<symbol>)</symbol>
					</subroutineCall>
					<symbol>;</symbol>
				</doStatement>
				<doStatement>
					<keyword>do</keyword>
					<subroutineCall>
						<identifier>draw</identifier>
						<symbol>(</symbol>
						<symbol>)</symbol>
					</subroutineCall>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<subroutineDec>
		<keyword>void</keyword>
		<identifier>hide</identifier>
		<parameterList>
			<symbol>(</symbol>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<statements>
				<doStatement>
					<keyword>do</keyword>
					<subroutineCall>
						<identifier>Screen</identifier>
						<symbol>.</symbol>
						<identifier>setColor</identifier>
						<symbol>(</symbol>
						<expressionList>
							<expression>
								<term>
									<keyword>false</keyword>
								</term>
							</expression>
						</expressionList>
						<symbol>)</symbol>
					</subroutineCall>
					<symbol>;</symbol>
				</doStatement>
				<doStatement>
					<keyword>do</keyword>
					<subroutineCall>
						<identifier>draw</identifier>
						<symbol>(</symbol>
						<symbol>)</symbol>
					</subroutineCall>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<subroutineDec>
		<keyword>void</keyword>
		<identifier>draw</identifier>
		<parameterList>
			<symbol>(</symbol>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<statements>
				<doStatement>
					<keyword>do</keyword>
					<subroutineCall>
						<identifier>Screen</identifier>
						<symbol>.</symbol>
						<identifier>drawRectangle</identifier>
						<symbol>(</symbol>
						<expressionList>
							<expression>
								<term>
									<identifier>x</identifier>
								</term>
							</expression>
							<symbol>,</symbol>
							<expression>
								<term>
									<identifier>y</identifier>
								</term>
							</expression>
							<symbol>,</symbol>
							<expression>
								<term>
									<identifier>x</identifier>
								</term>
								<symbol>+</symbol>
								<term>
									<identifier>width</identifier>
								</term>
							</expression>
							<symbol>,</symbol>
							<expression>
								<term>
									<identifier>y</identifier>
								</term>
								<symbol>+</symbol>
								<term>
									<identifier>height</identifier>
								</term>
							</expression>
						</expressionList>
						<symbol>)</symbol>
					</subroutineCall>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<subroutineDec>
		<keyword>void</keyword>
		<identifier>setDirection</identifier>
		<parameterList>
			<symbol>(</symbol>
			<keyword>int</keyword>
			<identifier>Adirection</identifier>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<statements>
				<letStatement>
					<keyword>let</keyword>
					<identifier>direction</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>Adirection</identifier>
						</term>
					</expression>
				</letStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<subroutineDec>
		<keyword>int</keyword>
		<identifier>getLeft</identifier>
		<parameterList>
			<symbol>(</symbol>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<statements>
				<returnStatement>
					<keyword>return</keyword>
					<expression>
						<term>
							<identifier>x</identifier>
						</term>
					</expression>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<subroutineDec>
		<keyword>int</keyword>
		<identifier>getRight</identifier>
		<parameterList>
			<symbol>(</symbol>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<statements>
				<returnStatement>
					<keyword>return</keyword>
					<expression>
						<term>
							<identifier>x</identifier>
						</term>
						<symbol>+</symbol>
						<term>
							<identifier>width</identifier>
						</term>
					</expression>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<subroutineDec>
		<keyword>void</keyword>
		<identifier>setWidth</identifier>
		<parameterList>
			<symbol>(</symbol>
			<keyword>int</keyword>
			<identifier>Awidth</identifier>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<statements>
				<doStatement>
					<keyword>do</keyword>
					<subroutineCall>
						<identifier>hide</identifier>
						<symbol>(</symbol>
						<symbol>)</symbol>
					</subroutineCall>
					<symbol>;</symbol>
				</doStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>width</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>Awidth</identifier>
						</term>
					</expression>
				</letStatement>
				<doStatement>
					<keyword>do</keyword>
					<subroutineCall>
						<identifier>show</identifier>
						<symbol>(</symbol>
						<symbol>)</symbol>
					</subroutineCall>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<subroutineDec>
		<keyword>void</keyword>
		<identifier>move</identifier>
		<parameterList>
			<symbol>(</symbol>
			<symbol>)</symbol>
		</parameterList>
		<symbol>{</symbol>
		<subroutineBody>
			<statements>
				<ifStatement>
					<keyword>if</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<identifier>direction</identifier>
						</term>
						<symbol>=</symbol>
						<term>
							<integerConstant>1</integerConstant>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>x</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>x</identifier>
								</term>
								<symbol>-</symbol>
								<term>
									<integerConstant>4</integerConstant>
								</term>
							</expression>
						</letStatement>
						<ifStatement>
							<keyword>if</keyword>
							<symbol>(</symbol>
							<expression>
								<term>
									<identifier>x</identifier>
								</term>
								<symbol>_LT_</symbol>
								<term>
									<integerConstant>0</integerConstant>
								</term>
							</expression>
							<symbol>)</symbol>
							<symbol>{</symbol>
							<statements>
								<letStatement>
									<keyword>let</keyword>
									<identifier>x</identifier>
									<symbol>=</symbol>
									<expression>
										<term>
											<integerConstant>0</integerConstant>
										</term>
									</expression>
								</letStatement>
							</statements>
							<symbol>}</symbol>
						</ifStatement>
						<doStatement>
							<keyword>do</keyword>
							<subroutineCall>
								<identifier>Screen</identifier>
								<symbol>.</symbol>
								<identifier>setColor</identifier>
								<symbol>(</symbol>
								<expressionList>
									<expression>
										<term>
											<keyword>false</keyword>
										</term>
									</expression>
								</expressionList>
								<symbol>)</symbol>
							</subroutineCall>
							<symbol>;</symbol>
						</doStatement>
						<doStatement>
							<keyword>do</keyword>
							<subroutineCall>
								<identifier>Screen</identifier>
								<symbol>.</symbol>
								<identifier>drawRectangle</identifier>
								<symbol>(</symbol>
								<expressionList>
									<expression>
										<term>
											<expression>
												<term>
													<identifier>x</identifier>
												</term>
												<symbol>+</symbol>
												<term>
													<identifier>width</identifier>
												</term>
											</expression>
											<symbol>)</symbol>
										</term>
										<symbol>+</symbol>
										<term>
											<integerConstant>1</integerConstant>
										</term>
									</expression>
									<symbol>,</symbol>
									<expression>
										<term>
											<identifier>y</identifier>
										</term>
									</expression>
									<symbol>,</symbol>
									<expression>
										<term>
											<expression>
												<term>
													<identifier>x</identifier>
												</term>
												<symbol>+</symbol>
												<term>
													<identifier>width</identifier>
												</term>
											</expression>
											<symbol>)</symbol>
										</term>
										<symbol>+</symbol>
										<term>
											<integerConstant>4</integerConstant>
										</term>
									</expression>
									<symbol>,</symbol>
									<expression>
										<term>
											<identifier>y</identifier>
										</term>
										<symbol>+</symbol>
										<term>
											<identifier>height</identifier>
										</term>
									</expression>
								</expressionList>
								<symbol>)</symbol>
							</subroutineCall>
							<symbol>;</symbol>
						</doStatement>
						<doStatement>
							<keyword>do</keyword>
							<subroutineCall>
								<identifier>Screen</identifier>
								<symbol>.</symbol>
								<identifier>setColor</identifier>
								<symbol>(</symbol>
								<expressionList>
									<expression>
										<term>
											<keyword>true</keyword>
										</term>
									</expression>
								</expressionList>
								<symbol>)</symbol>
							</subroutineCall>
							<symbol>;</symbol>
						</doStatement>
						<doStatement>
							<keyword>do</keyword>
							<subroutineCall>
								<identifier>Screen</identifier>
								<symbol>.</symbol>
								<identifier>drawRectangle</identifier>
								<symbol>(</symbol>
								<expressionList>
									<expression>
										<term>
											<identifier>x</identifier>
										</term>
									</expression>
									<symbol>,</symbol>
									<expression>
										<term>
											<identifier>y</identifier>
										</term>
									</expression>
									<symbol>,</symbol>
									<expression>
										<term>
											<identifier>x</identifier>
										</term>
										<symbol>+</symbol>
										<term>
											<integerConstant>3</integerConstant>
										</term>
									</expression>
									<symbol>,</symbol>
									<expression>
										<term>
											<identifier>y</identifier>
										</term>
										<symbol>+</symbol>
										<term>
											<identifier>height</identifier>
										</term>
									</expression>
								</expressionList>
								<symbol>)</symbol>
							</subroutineCall>
							<symbol>;</symbol>
						</doStatement>
					</statements>
					<symbol>}</symbol>
					<keyword>else</keyword>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>x</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>x</identifier>
								</term>
								<symbol>+</symbol>
								<term>
									<integerConstant>4</integerConstant>
								</term>
							</expression>
						</letStatement>
						<ifStatement>
							<keyword>if</keyword>
							<symbol>(</symbol>
							<expression>
								<term>
									<expression>
										<term>
											<identifier>x</identifier>
										</term>
										<symbol>+</symbol>
										<term>
											<identifier>width</identifier>
										</term>
									</expression>
									<symbol>)</symbol>
								</term>
								<symbol>_GT_</symbol>
								<term>
									<integerConstant>511</integerConstant>
								</term>
							</expression>
							<symbol>)</symbol>
							<symbol>{</symbol>
							<statements>
								<letStatement>
									<keyword>let</keyword>
									<identifier>x</identifier>
									<symbol>=</symbol>
									<expression>
										<term>
											<integerConstant>511</integerConstant>
										</term>
										<symbol>-</symbol>
										<term>
											<identifier>width</identifier>
										</term>
									</expression>
								</letStatement>
							</statements>
							<symbol>}</symbol>
						</ifStatement>
						<doStatement>
							<keyword>do</keyword>
							<subroutineCall>
								<identifier>Screen</identifier>
								<symbol>.</symbol>
								<identifier>setColor</identifier>
								<symbol>(</symbol>
								<expressionList>
									<expression>
										<term>
											<keyword>false</keyword>
										</term>
									</expression>
								</expressionList>
								<symbol>)</symbol>
							</subroutineCall>
							<symbol>;</symbol>
						</doStatement>
						<doStatement>
							<keyword>do</keyword>
							<subroutineCall>
								<identifier>Screen</identifier>
								<symbol>.</symbol>
								<identifier>drawRectangle</identifier>
								<symbol>(</symbol>
								<expressionList>
									<expression>
										<term>
											<identifier>x</identifier>
										</term>
										<symbol>-</symbol>
										<term>
											<integerConstant>4</integerConstant>
										</term>
									</expression>
									<symbol>,</symbol>
									<expression>
										<term>
											<identifier>y</identifier>
										</term>
									</expression>
									<symbol>,</symbol>
									<expression>
										<term>
											<identifier>x</identifier>
										</term>
										<symbol>-</symbol>
										<term>
											<integerConstant>1</integerConstant>
										</term>
									</expression>
									<symbol>,</symbol>
									<expression>
										<term>
											<identifier>y</identifier>
										</term>
										<symbol>+</symbol>
										<term>
											<identifier>height</identifier>
										</term>
									</expression>
								</expressionList>
								<symbol>)</symbol>
							</subroutineCall>
							<symbol>;</symbol>
						</doStatement>
						<doStatement>
							<keyword>do</keyword>
							<subroutineCall>
								<identifier>Screen</identifier>
								<symbol>.</symbol>
								<identifier>setColor</identifier>
								<symbol>(</symbol>
								<expressionList>
									<expression>
										<term>
											<keyword>true</keyword>
										</term>
									</expression>
								</expressionList>
								<symbol>)</symbol>
							</subroutineCall>
							<symbol>;</symbol>
						</doStatement>
						<doStatement>
							<keyword>do</keyword>
							<subroutineCall>
								<identifier>Screen</identifier>
								<symbol>.</symbol>
								<identifier>drawRectangle</identifier>
								<symbol>(</symbol>
								<expressionList>
									<expression>
										<term>
											<expression>
												<term>
													<identifier>x</identifier>
												</term>
												<symbol>+</symbol>
												<term>
													<identifier>width</identifier>
												</term>
											</expression>
											<symbol>)</symbol>
										</term>
										<symbol>-</symbol>
										<term>
											<integerConstant>3</integerConstant>
										</term>
									</expression>
									<symbol>,</symbol>
									<expression>
										<term>
											<identifier>y</identifier>
										</term>
									</expression>
									<symbol>,</symbol>
									<expression>
										<term>
											<identifier>x</identifier>
										</term>
										<symbol>+</symbol>
										<term>
											<identifier>width</identifier>
										</term>
									</expression>
									<symbol>,</symbol>
									<expression>
										<term>
											<identifier>y</identifier>
										</term>
										<symbol>+</symbol>
										<term>
											<identifier>height</identifier>
										</term>
									</expression>
								</expressionList>
								<symbol>)</symbol>
							</subroutineCall>
							<symbol>;</symbol>
						</doStatement>
					</statements>
					<symbol>}</symbol>
				</ifStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
		</subroutineBody>
		<symbol>}</symbol>
	</subroutineDec>
	<symbol>}</symbol>
</class>
