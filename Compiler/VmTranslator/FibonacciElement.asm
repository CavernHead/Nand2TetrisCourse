@256
D=A
@SP
M=D
@Sys.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init$ret.0)
//////////1: function Main.fibonacci 0
(Main.fibonacci)
@SP
//////////2: push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//////////3: push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//////////4: lt  
@SP
M=M-1
A=M-1
D=M
@SP
A=M
D=D-M
@LTTRUE4
D;JLT
D=0
@LTEND4
0;JMP
(LTTRUE4)
D=-1
(LTEND4)
@SP
M=M-1
@SP
A=M
M=D
@SP
M=M+1
//////////5: if-goto IF_TRUE 
@SP
M=M-1
A=M
D=M
@IF_TRUE$bar
D;JNE
//////////6: goto IF_FALSE 
@IF_FALSE$bar
0;JMP
//////////7: label IF_TRUE 
(IF_TRUE$bar)
//////////8: push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//////////9: return  
@ARG
D=M
@SP
A=M+1
M=D
@LCL
D=M
@SP
A=M
M=D
@3
D=A
@SP
A=M
A=M-D
D=M
@ARG
M=D
@2
D=A
@SP
A=M
A=M-D
D=M
@THIS
M=D
@1
D=A
@SP
A=M
A=M-D
D=M
@THAT
M=D
@4
D=A
@SP
A=M
A=M-D
D=M
@LCL
M=D
@5
D=A
@SP
A=M
A=M-D
D=M
@SP
A=M+1
A=M+1
M=D
@SP
A=M-1
D=M
@SP
A=M+1
A=M
M=D
@SP
A=M+1
D=M+1
@SP
M=D
A=M
A=M
0;JMP
//////////10: label IF_FALSE 
(IF_FALSE$bar)
//////////11: push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//////////12: push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//////////13: sub  
@SP
M=M-1
A=M-1
D=M
@SP
A=M
D=D-M
@SP
M=M-1
@SP
A=M
M=D
@SP
M=M+1
//////////14: call Main.fibonacci 1
@Main.fibonacci$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.14)
//////////15: push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//////////16: push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//////////17: sub  
@SP
M=M-1
A=M-1
D=M
@SP
A=M
D=D-M
@SP
M=M-1
@SP
A=M
M=D
@SP
M=M+1
//////////18: call Main.fibonacci 1
@Main.fibonacci$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.18)
//////////19: add  
@SP
M=M-1
A=M-1
D=M
@SP
A=M
D=D+M
@SP
M=M-1
@SP
A=M
M=D
@SP
M=M+1
//////////20: return  
@ARG
D=M
@SP
A=M+1
M=D
@LCL
D=M
@SP
A=M
M=D
@3
D=A
@SP
A=M
A=M-D
D=M
@ARG
M=D
@2
D=A
@SP
A=M
A=M-D
D=M
@THIS
M=D
@1
D=A
@SP
A=M
A=M-D
D=M
@THAT
M=D
@4
D=A
@SP
A=M
A=M-D
D=M
@LCL
M=D
@5
D=A
@SP
A=M
A=M-D
D=M
@SP
A=M+1
A=M+1
M=D
@SP
A=M-1
D=M
@SP
A=M+1
A=M
M=D
@SP
A=M+1
D=M+1
@SP
M=D
A=M
A=M
0;JMP
//////////21: function Sys.init 0
(Sys.init)
@SP
//////////22: push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//////////23: call Main.fibonacci 1
@Main.fibonacci$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.23)
//////////24: label WHILE 
(WHILE$bar)
//////////25: goto WHILE 
@WHILE$bar
0;JMP
