function Math.init 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
neg
pop argument 0
label IF_FALSE0
push argument 0
return
function Math.multiply 1
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
neg
pop argument 0
push argument 1
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
neg
pop argument 1
push argument 0
push argument 1
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
pop local 0
push argument 0
pop argument 1
push local 0
pop argument 0
label IF_FALSE2
push argument 0
push argument 1
call Math.multiplyPositive 2
return
goto IF_END1
label IF_FALSE1
push argument 0
push argument 1
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 1
pop local 0
push argument 0
pop argument 1
push local 0
pop argument 0
label IF_FALSE3
push argument 0
push argument 1
call Math.multiplyPositive 2
neg
return
label IF_END1
goto IF_END0
label IF_FALSE0
push argument 1
push constant 0
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push argument 1
neg
pop argument 1
push argument 0
push argument 1
gt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push argument 1
pop local 0
push argument 0
pop argument 1
push local 0
pop argument 0
label IF_FALSE5
push argument 0
push argument 1
call Math.multiplyPositive 2
neg
return
goto IF_END4
label IF_FALSE4
push argument 0
push argument 1
gt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push argument 1
pop local 0
push argument 0
pop argument 1
push local 0
pop argument 0
label IF_FALSE6
push argument 0
push argument 1
call Math.multiplyPositive 2
return
label IF_END4
label IF_END0
function Math.multiplyPositive 2
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push argument 0
lt
push local 0
push argument 0
eq
or
not
if-goto WHILE_END0
push argument 0
push local 0
and
push constant 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push argument 1
add
pop local 1
label IF_FALSE0
push argument 1
push argument 1
add
pop argument 1
push local 0
push local 0
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Math.divide 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
neg
pop argument 0
push argument 1
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
neg
pop argument 1
push argument 0
push argument 1
call Math.dividePositive 2
return
goto IF_END1
label IF_FALSE1
push argument 0
push argument 1
call Math.dividePositive 2
neg
return
label IF_END1
goto IF_END0
label IF_FALSE0
push argument 1
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
neg
pop argument 1
push argument 0
push argument 1
call Math.dividePositive 2
neg
return
goto IF_END2
label IF_FALSE2
push argument 0
push argument 1
call Math.dividePositive 2
return
label IF_END2
label IF_END0
function Math.dividePositive 2
push argument 1
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 0
push argument 1
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push argument 0
push argument 1
push argument 1
add
call Math.dividePositive 2
pop local 0
push local 0
push argument 1
call Math.multiplyPositive 2
pop local 1
push argument 0
push local 1
sub
push local 1
sub
push argument 1
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push local 0
add
return
label IF_FALSE2
push local 0
push local 0
add
push constant 1
add
return
function Math.outputVars 1
push static 0
push constant 1
add
pop static 0
push constant 6
call String.new 1
push constant 32
call String.appendChar 2
push constant 120
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 32
call String.appendChar 2
pop local 0
push local 0
call Output.printString 1
pop temp 0
push local 0
push argument 0
call String.setInt 2
pop temp 0
push local 0
call Output.printString 1
pop temp 0
push local 0
call String.dispose 1
pop temp 0
push constant 7
call String.new 1
push constant 32
call String.appendChar 2
push constant 44
call String.appendChar 2
push constant 121
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 32
call String.appendChar 2
pop local 0
push local 0
call Output.printString 1
pop temp 0
push local 0
push argument 1
call String.setInt 2
pop temp 0
push local 0
call Output.printString 1
pop temp 0
push local 0
call String.dispose 1
pop temp 0
push constant 6
call String.new 1
push constant 32
call String.appendChar 2
push constant 122
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 32
call String.appendChar 2
pop local 0
push local 0
call Output.printString 1
pop temp 0
push local 0
push argument 2
call String.setInt 2
pop temp 0
push local 0
call Output.printString 1
pop temp 0
push local 0
call String.dispose 1
pop temp 0
push constant 40
push static 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop static 0
push constant 0
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE0
push constant 0
return
function Math.Exp 2
push argument 0
pop local 1
label WHILE_EXP0
push local 0
push argument 1
lt
not
if-goto WHILE_END0
push local 1
push argument 0
call Math.multiply 2
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Math.HightestInt 0
push constant 32767
return
function Math.ExpPositive 2
push argument 0
pop local 1
label WHILE_EXP0
push local 0
push argument 1
lt
not
if-goto WHILE_END0
push local 1
push argument 0
call Math.multiplyPositive 2
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Math.sqrt 5
call Math.HightestInt 0
pop local 1
call Math.HightestInt 0
pop local 2
push argument 0
push constant 2
call Math.dividePositive 2
pop local 0
label WHILE_EXP0
push constant 0
not
not
if-goto WHILE_END0
push local 0
push local 0
call Math.multiplyPositive 2
pop local 3
push constant 0
push local 3
lt
push local 3
push argument 0
lt
push local 3
push argument 0
eq
or
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 2
call Math.dividePositive 2
pop local 1
push local 2
push local 1
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
pop local 1
label IF_FALSE1
push local 0
push local 1
add
pop local 0
goto IF_END0
label IF_FALSE0
push local 1
push constant 1
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push constant 1
sub
return
label IF_FALSE2
push local 1
push local 2
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 1
pop local 2
goto IF_END3
label IF_FALSE3
push local 1
push local 2
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 2
push constant 1
sub
pop local 2
label IF_FALSE4
label IF_END3
call Math.HightestInt 0
pop local 1
push local 0
push constant 2
call Math.dividePositive 2
pop local 0
push local 0
push constant 0
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 1
pop local 0
push constant 0
return
label IF_FALSE5
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
goto IF_END0
label IF_FALSE0
push argument 1
return
label IF_END0
function Math.min 0
push argument 0
push argument 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
goto IF_END0
label IF_FALSE0
push argument 1
return
label IF_END0
