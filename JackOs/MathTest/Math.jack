// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static int printCount; 
    static Array mult2Array;
    /** Initializes the library. */
    function void init() {
        let mult2Array = Array.new(16);
        let mult2Array[0] = 1;
        let mult2Array[1] = 2;
        let mult2Array[2] = 4;
        let mult2Array[3] = 8;
        let mult2Array[4] = 16;
        let mult2Array[5] = 32;
        let mult2Array[6] = 64;
        let mult2Array[7] = 128;
        let mult2Array[8] = 256;
        let mult2Array[9] = 512;
        let mult2Array[10] = 1024;
        let mult2Array[11] = 2048;
        let mult2Array[12] = 4096;
        let mult2Array[13] = 8192;
        let mult2Array[14] = 16384;
        let mult2Array[15] = 32767;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {

        if(x<0)
        {
            let x = -x;
        }
        return x;
    }
    //modulo
    function int modulo(int x,int y)
    {
    var int division;
    var int returnValue;
        if(x>y)
        {
           let division = Math.divide(x,y);
           let returnValue = x-Math.multiply(division,y);
           return returnValue;
        }
        else
        {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {

        var int intermid;
        //Get the abs value of x and y.Then gets signe of result 
        if(x<0)
        {
            let x=-x;
            if(y<0)
            {
                let y=-y;
                //invert x and y to make sure x always contains the smaller number. since x determines the amount of iterations of the loop.
                if(x>y)
                {
                     let intermid=y;
                     let y=x;
                     let x=intermid;
                }
                return Math.multiplyPositive(x,y);
            }
            else
            {
                if(x>y)
                {
                     let intermid=y;
                     let y=x;
                     let x=intermid;
                }
               return -Math.multiplyPositive(x,y);
            }
        }
        else
        {
            if(y<0)
            {
                let y=-y;
                if(x>y)
                {
                     let intermid=y;
                     let y=x;
                     let x=intermid;
                }
                return -Math.multiplyPositive(x,y);
            }
            else
            {
                if(x>y)
                {
                     let intermid=y;
                     let y=x;
                     let x=intermid;
                }
                return  Math.multiplyPositive(x,y);
            }
        }
        
    }
    function int multiplyPositive(int x, int y)
    {
        var int bit;
        var int result;
        let bit=0;
        while((mult2Array[bit]<x)|(mult2Array[bit]=x))
        {
            //check if currentbit is 1;
            if(~((x&mult2Array[bit])=0))
            {
                //add y shifted
                let result = result+y;
            }
            //shift y
            let y= y+y;
            let bit=bit+1;
        }
        return result;
    }
    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) 
    {
        //Get the abs value of x and y.Then gets signe of result 
        if(x<0)
        {
            let x=-x;
            if(y<0)
            {
                let y=-y;
                return Math.dividePositive(x,y);
            }
            else
            {
                return -Math.dividePositive(x,y);
            }
        }
        else
        {
            if(y<0)
            {
                let y=-y;
                return -Math.dividePositive(x,y);
                
            }
            else
            {
                return Math.dividePositive(x,y);
            }
        }
        
    }
    function int dividePositive(int x,int y)
    {
        var int result;
        var int mult;
        if(y<0)
        {
            return 0;
        }
        if(x<y)
        {
            return 0;
        }
        let result = Math.dividePositive(x,y+y);
        let mult = Math.multiplyPositive(result,y);
        if((x-mult-mult)<y)
        {
            return result+result;
        }
       
        return result+result+1;
    }
    function int Exp(int x,int e)
    {
        var int i;
        var int result;
        let result = x;
        while(i<e)
        {
            let result = Math.multiply(result,x);
            let i = i +1;
        }
        return result;
    }
    function int HightestInt()
    {
        return 32767;
    }
    function int ExpPositive(int x,int e)
    {
        var int i;
        var int result;
        let result = x;
        while(i<e)
        {
            let result = Math.multiplyPositive(result,x);
            let i = i +1;
        }
        return result;
    }
    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) 
    {
        var int y;
        var int incr;
        var int minIncr;
        var int sqY;

        var boolean incremented;
        let incr =  Math.HightestInt();
        let minIncr = Math.HightestInt();
        let y= Math.dividePositive(x,2);
       // do Math.outputVars(0,y,0);
        while(true)
        {
            let sqY = Math.multiplyPositive(y,y);
            if((0<sqY)&((sqY<x)|(sqY=x)))
            {
                
                let incr = Math.dividePositive(y,2);
                if(minIncr<incr)
                {
                    let incr=minIncr;
                }
                let y =y+incr;
            }
            else
            {   
                if(incr=1)
                {
                    return y-1;
                }
                if(incr<minIncr)
                {
                    let minIncr= incr;
                }
                else
                {
                    if(incr=minIncr)
                    {
                        let minIncr= minIncr-1;
                    }
                }
                let incr = Math.HightestInt();
                let y =Math.dividePositive(y,2);
                if(y=0)
                {
                    let y=1;
                    return 0;
                }
            }
        }
        
        return 0;
        
    }
  /** Returns the greater number. */
    function int max(int a, int b) {
      if(a>b)
        {
             return a;
        }
        else
        {
            return b;
        }
    }
    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a<b)
        {
             return a;
        }
        else
        {
            return b;
        }
    }
    function void outputVars(int x, int y, int z )
    {
        var String s;
        
            let printCount = printCount+1;
            
            let s = " x:   ";
            do Output.printString(s);
            do s.setInt(x);
            do Output.printString(s);
            do s.dispose();

            let s = " ,y:   ";
            do Output.printString(s);
            do s.setInt(y);
            do Output.printString(s);
            do s.dispose();

            
            let s = " z:   ";
            do Output.printString(s);
            do s.setInt(z);
            do Output.printString(s);
            do s.dispose();
    
        if(40<printCount)
        {
            let printCount =0;
            do Output.moveCursor(0, 0);
        }
        return;
        
    }
}
