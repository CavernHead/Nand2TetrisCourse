// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    /** Initializes the class. */
    static Array fullMemory;
    static int firstFreeNode;
    static String outOfMemmryMsg; 
    function void init() {
       
        let fullMemory =0;
        let fullMemory[Memory.getHeapStart()] = 0; //2024 =>0
        let fullMemory[Memory.getHeapStart()+1] = Memory.getHeapEnd()-(Memory.getHeapStart()+2); //2025 =>37k
        let firstFreeNode = Memory.getHeapStart()+2;    //2026 =>free
        let outOfMemmryMsg = "heap out of memory";
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return fullMemory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let fullMemory[address] = value;
       return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) 
    {   
        var int freeNodeAdress;
        var int chosenFreeNodeAdress;
        let freeNodeAdress = firstFreeNode;
        while(true)
        {
            if((size+1)<fullMemory[freeNodeAdress-1])//smaller or equal then node size + 2
            {
                let fullMemory[freeNodeAdress-1] = fullMemory[freeNodeAdress-1]-(2+size);
                let chosenFreeNodeAdress = freeNodeAdress+fullMemory[freeNodeAdress-1]+2;
                let fullMemory[chosenFreeNodeAdress-1] = size;
                let fullMemory[chosenFreeNodeAdress-2] = 0; //points to no node cause free
                return chosenFreeNodeAdress;
            }
            if(fullMemory[freeNodeAdress-2]=0)
            {
                //out of memory i want to keep a reserve memory for this message
                do Output.printString(outOfMemmryMsg);
                return null;
            }
            let freeNodeAdress = fullMemory[freeNodeAdress-2];
        }
        return null;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) 
    {
        let fullMemory[o-2] = firstFreeNode;
        let firstFreeNode = o;
        return;
    } 

    function int getHeapStart()
    {
        return 2048;
    }
    function int getHeapEnd()
    {
        return 16384;
    }
}
