// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {


    field Array str;
    field int lngth;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let lngth = 0;
        if(0<maxLength)
        {
            let str = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(~(str=null))
        {
            do str.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return lngth;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j]=c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[lngth]=c;
        let lngth=lngth+1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(0<lngth)
        {
            let lngth=lngth-1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() 
    {
        var int intr;
        var int i;
        var int k;
        var int v;
        var Array exp10;
        var int negative;
        var boolean continueLoop;
        let exp10 = String.getEx10Array();
        let continueLoop = true;
        let negative = -1;
        while(continueLoop)
        {
            if(lngth=i)
            {
                let continueLoop = false;
            }
            else
            {
                if((i=0)&(str[i]=45))
                {
                    let negative = 0;
                    let i=i+1;
                }
                else
                {
                    if((47<str[i])&(str[i]<58))
                    {
                        let i=i+1;
                    }
                    else
                    {
                        let continueLoop = false;
                    }
                }
            }
        }
        let i = i-1;
        while(negative<i)
        {
            let intr = str[i]-48;
            let v = v+(intr*exp10[k]);
            let i = i-1;
            let k= k+1;
        }
        if(negative=0)
        {
            let v = -v;
        }
        do exp10.dispose();
        return v;
    }
    
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) 
    {
        var int i;
        var int prI;
        var int currentDigit;
        var Array digitArray;
        var Array exp10;
        var String moment;

        let digitArray =Array.new(5);
        let exp10 = String.getEx10Array();
    
        
        while(0<lngth)
        {
           do eraseLastChar();
        }
        
        
        if(val=0)
        {
            let moment= appendChar(48);
            do digitArray.dispose();
            do exp10.dispose();
            return;
        }
        if(val<0)
        {
            let val =-val;
            let moment= appendChar(45);
        }
        let i = 1;
        let prI= 0;
        while(~(val=0))
        {
            if(i=5)
            {
                let currentDigit= val/exp10[prI];
            }
            else
            {
                let currentDigit= String.modulo(val,exp10[i])/exp10[prI];
            }
            let digitArray[prI]=48+currentDigit;
            let val=val-(exp10[prI]*currentDigit);
            let i = i+1;
            let prI= prI+1;
        }
        let i =prI-1;
        while(-1<i)
        {
             let moment= appendChar(digitArray[i]);
             let i =i-1;
        }

        do digitArray.dispose();
        do exp10.dispose();
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
    function Array getEx10Array()
    {
        var Array exp10;
        let exp10 = Array.new(5);
        let exp10[0] = 1;
        let exp10[1] = 10;
        let exp10[2] = 100;
        let exp10[3] = 1000;
        let exp10[4] = 10000;
        return exp10;
    }

    function int modulo(int x,int y)
    {
        var int division;
        if(x>y)
        {
           return x-Math.multiply(Math.divide(x,y),y);
        }
        else
        {
            return x;
        }
    }
}
